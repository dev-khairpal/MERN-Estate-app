import { combineReducers, configureStore } from "@reduxjs/toolkit";
import userReducer from "./user/userSlice";
import {persistReducer,persistStore} from 'redux-persist'
import storage from "redux-persist/lib/storage";

const rootReducer = combineReducers({user:userReducer})

const persistConfig = {
    key:'root',
    storage,
    version:1,
}

const persistedReducer = persistReducer(persistConfig, rootReducer)

export const store = configureStore({
  reducer:persistedReducer,
  middleware: (getDefaultMiddleware) =>
    getDefaultMiddleware({
      serializableCheck: false,
    }),
});

export const persistor = persistStore(store);

/*Why It Works Without Explicitly Exporting userReducer
1. Default Export in userSlice:

In your userSlice.js, you have the following line at the end:

    export default userSlice.reducer;

This means that the userSlice.reducer (the reducer function generated by createSlice) is the default export of the module.

2. Importing the Default Export:

In your store.js, you import the default export from userSlice.js like this:

    import userReducer from './user/userSlice';

Since userSlice.reducer is the default export, you can import it with any name (in this case, userReducer).

3. How Redux Toolkit Works:

The createSlice function automatically generates a reducer function (accessible as userSlice.reducer) and action creators (accessible as userSlice.actions).

You don't need to manually create or export the reducer; it's handled by createSlice.
*/
